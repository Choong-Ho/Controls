<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Controls"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
                    mc:Ignorable="options">
    <sys:Double x:Key="normalBgOpacity">1</sys:Double>
    <sys:Double x:Key="overBgOpacity">.2</sys:Double>
    <sys:Double x:Key="pressBgOpacity">.1</sys:Double>

    <Style x:Key="NormalButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinWidth" Value="70"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="DockPanel.Dock" Value="Right"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Background" Value="{DynamicResource normalButtonBgColor}"/>
        <Setter Property="BorderBrush" Value="Silver"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1"
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <!--<Grid>-->
                        <!--<Border BorderBrush="White" BorderThickness="1,1,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CornerRadius="2"/>-->
                        <Border x:Name="border" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="1,1,0,0">
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFFBFBFB" Offset="0"/>
                                    <GradientStop Color="#FFEAEAEA" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4"/>
                        </Border>
                        <!--</Grid>-->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Cursor" Value="Arrow"/>
                            <Setter Property="Background" Value="{DynamicResource normalButtonDisableColor}"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.4"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource normalButtonMouseOverColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LightButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Width" Value="138"/>
        <Setter Property="DockPanel.Dock" Value="Right"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Background" Value="{DynamicResource lightButtonBgColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource lightButtonBorderColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" BorderBrush="#FF0063AD">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FF2592E6" Offset="0"/>
                                    <GradientStop Color="#FF1B80CE" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <ContentPresenter Margin="4" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF555555"/>
                            <Setter Property="Background" Value="#FFF0F0F0"/>
                            <Setter Property="BorderBrush" Value="#FFD8D8D8"/>
                            <Setter Property="Cursor" Value="Arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource lightButtonMouseOverColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:WindowStateImageButton}">
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WindowStateImageButton}">
                    <Grid VerticalAlignment="Center" HorizontalAlignment="Center" Background="{TemplateBinding Background}">
                        <Image x:Name="normal" Source="{TemplateBinding NormalImage}"/>
                        <Image x:Name="over" Source="{TemplateBinding OverImage}" Visibility="Collapsed"/>
                        <Image x:Name="press" Source="{TemplateBinding PressImage}" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="over" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="normal" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="press" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="press" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="normal" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="over" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="winStatePathStyle" TargetType="{x:Type Path}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
    </Style>

    <Style x:Key="bgRectStyle" TargetType="{x:Type Rectangle}">
        <!--<Setter Property="Fill" Value="{StaticResource windowStateColor}"/>-->
        <Setter Property="Stroke" Value="{DynamicResource bgRectStorkeColor}"/>
        <Setter Property="Opacity" Value="{StaticResource normalBgOpacity}"/>
        <Setter Property="RadiusY" Value="2"/>
        <Setter Property="RadiusX" Value="2"/>
    </Style>

    <Style TargetType="{x:Type local:PathButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PathButton}">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"  VerticalAlignment="{TemplateBinding VerticalAlignment}" 
                          HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                        <Rectangle x:Name="bgRect" Style="{StaticResource bgRectStyle}" StrokeThickness="{TemplateBinding BgStrokeThickness}" Fill="{TemplateBinding Background}"/>
                        <Path x:Name="normal" Data="{TemplateBinding NormalData}" Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NormalColor}"
                              Style="{StaticResource winStatePathStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bgRect" Property="Opacity" Value="{StaticResource overBgOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="bgRect" Property="Opacity" Value="{StaticResource pressBgOpacity}"/>
                            <Setter TargetName="normal" Property="Fill" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:WindowStatePathToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WindowStatePathToggleButton}">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}"
                          VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                        <Rectangle x:Name="bgRect" Style="{StaticResource bgRectStyle}"/>
                        <Path x:Name="maxPath" Data="{TemplateBinding MaxData}" 
                              Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NormalColor}"
                              Style="{StaticResource winStatePathStyle}"/>
                        <Path x:Name="normalPath" Data="{TemplateBinding NormalData}" 
                              Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NormalColor}" 
                              Visibility="Collapsed"
                              Style="{StaticResource winStatePathStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bgRect" Property="Opacity" Value="{StaticResource overBgOpacity}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="bgRect" Property="Opacity" Value="{StaticResource pressBgOpacity}"/>
                            <Setter TargetName="maxPath" Property="Fill" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressColor}"/>
                            <Setter TargetName="normalPath" Property="Fill" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressColor}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Visibility}" Value="Visible"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:CWindow}, 
                                                                                            Path=WindowState, TargetNullValue='Normal', FallbackValue='Normal'}" Value="Maximized"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsChecked" Value="True"/>
                            <Setter TargetName="maxPath" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="normalPath" Property="Visibility" Value="Visible"/>
                            <Setter Property="ToolTip" Value="Restore"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Visibility}" Value="Visible"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:CWindow},
                                                                                            Path=WindowState, TargetNullValue='Normal', FallbackValue='Normal'}" Value="Normal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsChecked" Value="False"/>
                            <Setter TargetName="maxPath" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="normalPath" Property="Visibility" Value="Collapsed"/>
                            <Setter Property="ToolTip" Value="Maximize"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:PathRpeatButton}">
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PathRpeatButton}">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                          Background="{TemplateBinding Background}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="Center">
                        <Rectangle x:Name="rect" Opacity="{TemplateBinding PathBgOpacity}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center"
                              Stretch="{TemplateBinding PathStretch}" Margin="{TemplateBinding PathMargin}" 
                              Data="{TemplateBinding Data}" Fill="{TemplateBinding PathColor}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="rect" Property="Fill" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="rect" Property="Fill" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MousePressColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ImageRadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#FFd8d9db"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content, Mode=OneTime}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageRadioButton}">
                    <Border Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid ClipToBounds="{TemplateBinding ClipToBounds}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="35"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image Source="{TemplateBinding ContentImage}" Width="16" Height="15"
                                   HorizontalAlignment="Left" VerticalAlignment="Center" Margin="16,1,0,0" />
                            <TextBlock Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center"
                                       Text="{TemplateBinding Content}" TextTrimming="CharacterEllipsis"
                                       Margin="4,0,1,0"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="LightGray"/>
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="White"/> 
                            <Setter Property="Background" Value="{DynamicResource radioBtnSelectedColor}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource radioBtnBorderSelectedColor}"/>
                            <Setter Property="BorderThickness" Value="0,1,0,1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                               <Condition Property="IsChecked" Value="False"/>
                               <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                               <Setter Property="Background" Value="#FF5D6470"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ImageToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=OnToolTip}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageToggleButton}">
                    <Grid>
                        <Image x:Name="img" Stretch="None"
                               Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                               Source="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=OffImage}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="img" Property="Source" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=OnImage}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=OffToolTip}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>